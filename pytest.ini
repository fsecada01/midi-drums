[pytest]
# Pytest configuration for MIDI Drums Generator

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Test paths
testpaths = tests

# Console output
console_output_style = progress
addopts =
    # Verbose output
    -v
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Coverage reporting
    --cov=midi_drums
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    # Fail if coverage is below threshold
    --cov-fail-under=70
    # Run in parallel (adjust -n based on CPU cores)
    -n auto
    # Strict markers
    --strict-markers
    # Show durations of slowest tests
    --durations=10

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for end-to-end workflows
    ai: AI-powered generation tests (requires API key)
    slow: Tests that take significant time
    requires_api: Tests requiring external API access

# Ignore paths
norecursedirs =
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .venv
    venv
    output
    logs
    htmlcov

# Warning filters
filterwarnings =
    # Ignore specific warnings
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Treat other warnings as errors
    # error::Warning

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Cache
cache_dir = .pytest_cache
